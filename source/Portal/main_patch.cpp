#if defined(PORTAL) && defined(PORTAL2)
	#error You cannot define PORTAL and PORTAL2 at the same time!
#endif

#if !defined(PORTAL) && !defined(PORTAL2)
	#error You must define if you are using PORTAL or PORTAL2!
#endif

#include "skyline/inlinehook/And64InlineHook.hpp"
#include "skyline/utils/cpputils.hpp"
#include "skyline/inlinehook/memcpy_controlled.hpp"
#include "nn/fs.h"
#include "nn/account.h"
#include "nn/nifm.h"
#include "nn/ro.h"
#include <string>
#include <algorithm>
#include <vector>

uintptr_t TextRegionOffset = 0;

ptrdiff_t returnInstructionOffset(uintptr_t LR) {
	return LR - TextRegionOffset;
}

uintptr_t filesystem_nro_ptr = 0;

struct nroHashes {
	uint8_t buildid[16];
	const char* filename;
};

#ifdef PORTAL
//version 1.0.1
nroHashes NROs[] = {
	{{0xf6, 0x2c, 0x71, 0xfd, 0x88, 0x0, 0x39, 0x24, 0x1b, 0x72, 0xbc, 0x1, 0xbb, 0x24, 0x4c, 0xf3}, "bsppack.nro"},
	{{0x2e, 0x45, 0xe9, 0x23, 0xcb, 0xdc, 0x74, 0xa2, 0x25, 0x6c, 0xb9, 0xa5, 0xba, 0x2, 0x9b, 0x21}, "bugreporter_filequeue.nro"},
	{{0x1c, 0xf4, 0x0, 0xf4, 0xde, 0xd9, 0x67, 0x18, 0x39, 0x24, 0xc1, 0x57, 0x1c, 0x3e, 0x56, 0xec}, "bugreporter_public.nro"},
	{{0x3, 0xab, 0x9d, 0xa8, 0xad, 0xb0, 0xce, 0x71, 0x5a, 0x9d, 0xc, 0xd9, 0x35, 0x35, 0xe9, 0x67}, "client.nro"},
	{{0xfa, 0x35, 0x89, 0x35, 0x88, 0xb1, 0xca, 0x8f, 0x8c, 0x97, 0x4d, 0x73, 0x39, 0x4, 0x39, 0xb1}, "datacache.nro"},
	{{0xde, 0x2c, 0x23, 0xc7, 0x4e, 0xf3, 0xb2, 0x5d, 0x4, 0x2e, 0xf3, 0x55, 0x2f, 0x3a, 0xdf, 0x2e}, "engine.nro"},
	{{0x3c, 0xc4, 0xa4, 0x98, 0x51, 0x52, 0x2f, 0xb6, 0xfb, 0x4f, 0x52, 0xfa, 0x59, 0xfb, 0xdd, 0x79}, "filesystem_stdio.nro"},
	{{0xd9, 0xb8, 0x27, 0xae, 0xa1, 0x99, 0x31, 0x39, 0xdd, 0x84, 0x15, 0x62, 0x32, 0x1, 0x3e, 0x4}, "GameUI.nro"},
	{{0x55, 0x68, 0xa4, 0xf5, 0x93, 0xec, 0xaf, 0x4b, 0x59, 0x4, 0x57, 0x47, 0xbc, 0x49, 0x1c, 0x90}, "inputsystem.nro"},
	{{0xf2, 0x80, 0xfc, 0x4d, 0x98, 0x88, 0x24, 0xe, 0xef, 0x60, 0x76, 0xd4, 0x3c, 0x83, 0x73, 0xc}, "launcher.nro"},
	{{0x4c, 0xf8, 0x24, 0xfa, 0x3c, 0x83, 0xce, 0x46, 0xca, 0x51, 0x10, 0xa4, 0xbe, 0xb3, 0x0, 0x75}, "materialsystem.nro"},
	{{0x92, 0xb, 0x2f, 0x41, 0xd2, 0x60, 0x24, 0x78, 0x74, 0x36, 0x7e, 0x97, 0x6f, 0xb4, 0x78, 0xe3}, "scenefilecache.nro"},
	{{0xa7, 0x4e, 0x2d, 0x73, 0xe6, 0x2e, 0x18, 0x7f, 0xf, 0x4, 0x22, 0x48, 0x2b, 0xd3, 0x7e, 0xd8}, "server.nro"},
	{{0xdc, 0x24, 0xb4, 0x79, 0xb2, 0x8, 0x84, 0x35, 0xfc, 0xc9, 0x34, 0x99, 0x6c, 0xbe, 0x74, 0xdf}, "ServerBrowser.nro"},
	{{0x3c, 0xcf, 0xa5, 0xc5, 0x7f, 0x13, 0x1d, 0xdb, 0xcb, 0x8d, 0xcb, 0x5e, 0x95, 0x24, 0x28, 0x6d}, "shaderapidx9.nro"},
	{{0x15, 0x8a, 0x4a, 0x22, 0x6b, 0x7a, 0x54, 0xf1, 0xd0, 0x4b, 0xf5, 0xef, 0xbe, 0x8d, 0xdc, 0x25}, "shaderapiempty.nro"},
	{{0xec, 0xcf, 0x2, 0x2, 0xb3, 0x2d, 0xb8, 0x38, 0xc3, 0xd2, 0x54, 0x9c, 0x55, 0x2c, 0xc7, 0x1}, "soundemittersystem.nro"},
	{{0xf0, 0x41, 0xb, 0x77, 0xcc, 0xea, 0x2a, 0xcd, 0x5b, 0xb9, 0xe2, 0x2c, 0xda, 0x80, 0xfd, 0x54}, "stdshader_dx9.nro"},
	{{0x22, 0xc5, 0x53, 0x54, 0x95, 0x1f, 0xbd, 0xb1, 0x40, 0xed, 0xca, 0xeb, 0x1a, 0x16, 0x87, 0x52}, "studiorender.nro"},
	{{0x9f, 0x9d, 0xea, 0x23, 0x44, 0x65, 0xb2, 0x75, 0x79, 0x2a, 0xf3, 0xbe, 0x63, 0x22, 0x75, 0x59}, "tier0.nro"},
	{{0x2b, 0x8e, 0x9f, 0xdc, 0x3c, 0xc4, 0x30, 0xce, 0xc0, 0x14, 0x7, 0x80, 0xfb, 0xdc, 0xee, 0xd4}, "togl.nro"},
	{{0x41, 0x98, 0xed, 0xe0, 0x45, 0x4e, 0x9c, 0xb4, 0x9c, 0x28, 0x9c, 0xf3, 0x82, 0x7e, 0x77, 0xf0}, "vgui2.nro"},
	{{0x7e, 0x58, 0x7, 0x16, 0x3b, 0x32, 0x17, 0xff, 0x51, 0x9f, 0xd4, 0xfa, 0x8c, 0x40, 0xeb, 0xa5}, "vguimatsurface.nro"},
	{{0xaa, 0x89, 0xc9, 0x85, 0xd7, 0x73, 0x46, 0x8d, 0xa9, 0xb9, 0x4c, 0x21, 0x5e, 0xb5, 0x5b, 0xe7}, "video_nx.nro"},
	{{0x3e, 0x78, 0xee, 0xb4, 0xe, 0x14, 0xd5, 0xd1, 0xde, 0x88, 0xbc, 0x4d, 0x7c, 0xc2, 0xef, 0x79}, "video_services.nro"},
	{{0x68, 0x45, 0x88, 0xba, 0x8f, 0xf2, 0x97, 0xa1, 0x0, 0x3e, 0xfa, 0x4c, 0xbd, 0x23, 0x6e, 0x1f}, "vphysics.nro"},
	{{0x1, 0x18, 0x21, 0xaa, 0xc9, 0x3b, 0x86, 0x2d, 0x13, 0x61, 0xf4, 0xcf, 0xb3, 0x99, 0xef, 0xa9}, "vstdlib.nro"},
	{{0xde, 0x85, 0x84, 0xed, 0xae, 0xbe, 0x60, 0x10, 0x66, 0x3e, 0xb, 0xae, 0x85, 0xdb, 0x59, 0xda}, "vtex_dll.nro"}
};
#endif

#ifdef PORTAL2
//version 1.0.0
nroHashes NROs[] = {
	{{0xa7, 0xb9, 0xc3, 0x86, 0x73, 0x82, 0x56, 0x72, 0x4b, 0xac, 0xee, 0xd4, 0x4c, 0xbb, 0x1d, 0x68}, "bsppack.nro"},
	{{0x6f, 0x11, 0x72, 0xdd, 0x16, 0xfa, 0x27, 0xeb, 0x69, 0x79, 0x21, 0x36, 0x4f, 0x8a, 0x78, 0xcb}, "client.nro"},
	{{0x40, 0x27, 0xdd, 0x61, 0xe, 0x3d, 0x38, 0xee, 0x1e, 0xda, 0x99, 0x5, 0xb0, 0x1b, 0x83, 0x2f}, "datacache.nro"},
	{{0xdf, 0x58, 0x5, 0x16, 0x7e, 0xe5, 0x15, 0x14, 0xbf, 0x2f, 0x57, 0x2d, 0x26, 0x52, 0xa3, 0x88}, "engine.nro"},
	{{0x60, 0xa9, 0xe7, 0x5e, 0x36, 0x62, 0xe6, 0xa4, 0x8a, 0x24, 0xf7, 0xc9, 0x58, 0x25, 0x7f, 0x26}, "filesystem_stdio.nro"},
	{{0x74, 0xcd, 0x78, 0xb7, 0xb2, 0xb0, 0x10, 0xa3, 0xf1, 0x4f, 0x71, 0x2f, 0xa8, 0x36, 0x82, 0xac}, "inputsystem.nro"},
	{{0x98, 0x23, 0x9a, 0xb9, 0xee, 0x84, 0xeb, 0xa4, 0x58, 0xfb, 0xda, 0x71, 0x81, 0x81, 0x60, 0xa4}, "launcher.nro"},
	{{0x4, 0xeb, 0x58, 0xaf, 0x45, 0xb2, 0x55, 0xec, 0xc, 0x7c, 0xfa, 0xe0, 0xbc, 0x1, 0x2b, 0xc1}, "localize.nro"},
	{{0x6c, 0xf7, 0xad, 0x9e, 0xfc, 0xd6, 0x30, 0x80, 0x2, 0xda, 0xf1, 0x58, 0xc9, 0x16, 0x53, 0xf2}, "matchmaking.nro"},
	{{0x69, 0xbd, 0x85, 0x2, 0x0, 0xac, 0xbb, 0xff, 0x7d, 0x6b, 0x6e, 0xf3, 0x12, 0xd6, 0x4e, 0x53}, "materialsystem.nro"},
	{{0xd4, 0x4a, 0x43, 0x78, 0xff, 0xf0, 0x4d, 0x79, 0x38, 0xce, 0x29, 0xcb, 0xb4, 0x2, 0x52, 0xb2}, "scenefilecache.nro"},
	{{0x42, 0xd5, 0x9b, 0x8b, 0xf6, 0xf0, 0x2b, 0x1f, 0xe7, 0x5a, 0xbf, 0x5f, 0xa3, 0xa1, 0x43, 0x57}, "server.nro"},
	{{0x97, 0xe6, 0xf3, 0xb8, 0x67, 0xd2, 0xc, 0xfa, 0x47, 0x7a, 0x36, 0x3a, 0x97, 0xd8, 0xe, 0x65}, "shaderapiempty.nro"},
	{{0x1f, 0x8, 0x71, 0x4a, 0xc9, 0x2b, 0x1b, 0xb2, 0xac, 0xa5, 0x6a, 0x1c, 0x32, 0xe0, 0x87, 0x54}, "soundemittersystem.nro"},
	{{0xe4, 0xb6, 0xc3, 0xc7, 0x5d, 0xcd, 0x40, 0xf2, 0xeb, 0xfe, 0xfc, 0x97, 0x32, 0x7, 0x61, 0x7c}, "studiorender.nro"},
	{{0x41, 0xc2, 0x9, 0x76, 0x37, 0x89, 0x79, 0xe, 0x42, 0x97, 0x19, 0xce, 0x75, 0x4c, 0x71, 0xdb}, "tier0.nro"},
	{{0xa8, 0x3f, 0x79, 0x4, 0xf, 0x84, 0x19, 0x3c, 0x2f, 0x21, 0xa6, 0xc3, 0x9d, 0x3a, 0x6b, 0xab}, "vgui2.nro"},
	{{0x4e, 0x6e, 0x41, 0x17, 0x61, 0xf7, 0x28, 0x7d, 0xae, 0x9f, 0x6a, 0xa9, 0x2, 0x17, 0x92, 0x4e}, "vguimatsurface.nro"},
	{{0xc0, 0x1b, 0x27, 0xe5, 0x14, 0xe9, 0xae, 0xb0, 0x1e, 0x6a, 0xa9, 0x82, 0xc1, 0x6, 0xc6, 0x85}, "vphysics.nro"},
	{{0x75, 0x1, 0xf, 0x2c, 0xca, 0x80, 0x43, 0x4e, 0x3c, 0x58, 0x0, 0xd9, 0x29, 0xf3, 0xe4, 0x6}, "vscript.nro"},
	{{0x98, 0xdc, 0xfe, 0x5d, 0x1f, 0x73, 0x6d, 0xc1, 0x97, 0x1d, 0xf3, 0x54, 0x29, 0xab, 0x52, 0x65}, "vstdlib.nro"}
};
#endif

extern "C" {
	FILE* fopen ( const char * filename, const char * mode );
	FILE* fopen_nx ( const char * filename, const char * mode );
	int fseek( FILE * stream, long offset, int origin );
	size_t fread( void * buffer, size_t size, size_t count, FILE * stream );
	int fclose( FILE * stream );
	int fclose_nx( FILE * stream );
	long ftell( FILE * stream );
	#ifdef PORTAL2
	void* _ZN2nn3mem17StandardAllocator8AllocateEm(void* _this, size_t size);
	#endif
}

namespace nn { 

	namespace nifm {
		uint64_t (*Initialize_original)();
		uint64_t Initialize_hook() {
			return 0x27C;
		}
	}
}

bool formatPath (const char* path, char* filepath) {
	if (!strncmp(path, "/", 1))
		snprintf(&filepath[0], 255, "rom:%s", path);
	else if (!strncmp(path, "nxcontent", 9))
		snprintf(&filepath[0], 255, "rom:/%s", path);
	else if (!strncmp(path, "platform", 8))
		snprintf(&filepath[0], 255, "rom:/%s", path);
	#ifdef PORTAL
	else if (!strncmp(path, "hl2", 3))
		snprintf(&filepath[0], 255, "rom:/%s", path);
	else if (!strncmp(path, "portal", 6))
		snprintf(&filepath[0], 255, "rom:/%s", path);
	#endif
	#ifdef PORTAL2
	else if (!strncmp(path, "update", 6))
		snprintf(&filepath[0], 255, "rom:/%s", path);
	else if (!strncmp(path, "portal2_dlc1", 12))
		snprintf(&filepath[0], 255, "rom:/%s", path);
	else if (!strncmp(path, "portal2_dlc2", 12))
		snprintf(&filepath[0], 255, "rom:/%s", path);
	else if (!strncmp(path, "portal2", 7))
		snprintf(&filepath[0], 255, "rom:/%s", path);
	#endif
	else 
		return false;
	return true;
}

typedef void* CFileClass;

CFileClass (*fopen3_original)(void* _class, const char* path, const char* mode, void* x3, void* x4, void* x5);
CFileClass fopen3_hook(void* _class, const char* path, const char* mode, void* x3, void* x4, void* x5){
	CFileClass test = fopen3_original(_class, path, mode, x3, x4, x5);
	if (test) {
		return test;
	}

	if (!strncmp(path, "/portal2/", strlen("/portal2/")) || !strncmp(path, "/portal2_dlc1/", strlen("/portal2_dlc1/")) ||
	!strncmp(path, "/portal2_dlc2/", strlen("/portal2_dlc2/")) ||!strncmp(path, "/update/", strlen("/update/"))) {
		std::string temp = "/nxcontent";
		temp += path;
		CFileClass fp = fopen3_original(_class, temp.c_str(), mode, x3, x4, x5);
		if (fp)
			return fp;

	}

	const char* paths[] = {
		"/nxcontent/update",
		"/nxcontent/portal2_dlc2",
		"/nxcontent/portal2_dlc1",
		"/nxcontent/portal2",
		"/update",
		"/portal2_dlc2",
		"/portal2_dlc1",
		"/portal2",
		"/platform"
	};

	
	for (uint8_t i = 0; i < 9; i++) {
		std::string temp = paths[i];
		temp += path;
		CFileClass fp = fopen3_original(_class, temp.c_str(), mode, x3, x4, x5);
		if (fp) {
			return fp;
		}
	}		


	return fopen3_original(_class, path, mode, x3, x4, x5);
}

struct fopen2Struct {
	uint64_t buffer_size;
	void* buffer;
};

void (*fopen2_original)(fopen2Struct* _struct, void* x1, const char* path);
void fopen2_hook(fopen2Struct* _struct, void* x1, const char* path){
	char filepath[256] = "";
	bool formatted = formatPath(path, &filepath[0]);
	if (!formatted)
		return fopen2_original(_struct, x1, path);

	FILE* file = fopen(filepath, "r");
	if(!file)
		return fopen2_original(_struct, x1, path);

	int32_t size = 0;
	fseek(file, 0, SEEK_END);
	size = ftell(file);
	rewind(file);

	#ifdef PORTAL
	void* new_buffer = malloc(size);
	#endif
	#ifdef PORTAL2
	void* Allocator = (void*)(TextRegionOffset+0x861078);
	void* new_buffer = _ZN2nn3mem17StandardAllocator8AllocateEm(Allocator, size);
	#endif

	fread(new_buffer, size, 1, file);
	fclose(file);

	_struct->buffer_size = size;
	_struct->buffer = new_buffer;
}

FILE* (*fopen_nx_original)(const char* path, const char* mode);
FILE* fopen_nx_hook(const char* path, const char* mode) {
	nn::fs::FileHandle filehandle;
	char filepath[256] = "";
	bool formatted = formatPath(path, &filepath[0]);
	if (!formatted)
		return fopen_nx_original(path, mode);

	if(R_FAILED(nn::fs::OpenFile(&filehandle, filepath, nn::fs::OpenMode_Read)))
		return fopen_nx_original(path, mode);
	nn::fs::CloseFile(filehandle);
	return fopen(filepath, mode);
}

char* (*strchr_original)(const char* string, int c);
char* strchr_hook(const char* string, int c) {
	ptrdiff_t offsetItr = (uintptr_t)__builtin_return_address(0) - filesystem_nro_ptr;
	switch(offsetItr) {
		case 0x94F8: {
			if (!strncmp(string, "r", 1))
				return nullptr;
		}
	}

	return strchr_original(string, c);
}

const char* checkUsedNRO (uint8_t* bidPtr) {
	for (size_t i = 0; i < std::size(NROs); i++) {
		if(!memcmp(bidPtr, &NROs[i].buildid[0], 16))
			return NROs[i].filename;
	}
	return nullptr;
}

Result (*LoadModule_original)(nn::ro::Module* pOutModule, const void* pImage, void* buffer, size_t bufferSize, int flag);
Result LoadModule_hook(nn::ro::Module* pOutModule, const void* pImage, void* buffer, size_t bufferSize, int flag) {
	const char* NROpath = checkUsedNRO((uint8_t*)((uintptr_t)pImage+0x40));
	Result ret = LoadModule_original(pOutModule, pImage, buffer, bufferSize, 1);
	if (!ret && NROpath) {
		if (strncmp(NROpath, "filesystem_stdio.nro", strlen("filesystem_stdio.nro")))
			return ret;
		
		uintptr_t pointer = 0;
		if(!nn::ro::LookupModuleSymbol(&pointer, pOutModule, "CreateInterface")) {
			pointer -= 0x304F0;
			filesystem_nro_ptr = pointer;

			A64HookFunction((void*)(filesystem_nro_ptr + 0x14CCC), reinterpret_cast<void*>(fopen3_hook), (void**)&fopen3_original);
		}

	}
	return ret;
}

void Portal_main()
{
	TextRegionOffset = (uintptr_t)skyline::utils::getRegionAddress(skyline::utils::region::Text);

	#ifdef PORTAL
	A64HookFunction((void*)(TextRegionOffset + 0x7D978), reinterpret_cast<void*>(fopen2_hook), (void**)&fopen2_original);
	#endif
	#ifdef PORTAL2
	A64HookFunction((void*)(TextRegionOffset + 0x182F50), reinterpret_cast<void*>(fopen2_hook), (void**)&fopen2_original);

	//Hook NRO loading
	A64HookFunction((void**)&nn::ro::LoadModule, reinterpret_cast<void*>(LoadModule_hook), (void**)&LoadModule_original);
	#endif


	A64HookFunction((void**)&fopen_nx, reinterpret_cast<void*>(fopen_nx_hook), (void**)&fopen_nx_original);

	A64HookFunction((void**)&strchr, reinterpret_cast<void*>(strchr_hook), (void**)&strchr_original);

	#ifdef PORTAL2
		#ifdef PDEBUG
	//Hook needed to run game with connected internet and blocked Nintendo servers

	A64HookFunction((void**)&nn::nifm::Initialize, reinterpret_cast<void*>(nn::nifm::Initialize_hook), (void**)&nn::nifm::Initialize_original);
		#endif
	#endif

}
